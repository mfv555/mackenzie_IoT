#include <ESP8266WiFi.h>
#include "Adafruit_MQTT.h"
#include "Adafruit_MQTT_Client.h"

// Wi-Fi
#define WLAN_SSID       "WIFI_HOME"
#define WLAN_PASS       "Ex3mpl0_2025"

// Adafruit IO
#define AIO_SERVER      "io.adafruit.com"
#define AIO_SERVERPORT  1883
#define AIO_USERNAME    "user_exeplo_123"
#define AIO_KEY         "aio_EXEMPLO_aaOFKlHtmz60kEKwZ"

// Pinos
#define sensor A0
#define waterPump D1

WiFiClient client;
Adafruit_MQTT_Client mqtt(&client, AIO_SERVER, AIO_SERVERPORT, AIO_USERNAME, AIO_KEY);

// Feeds
Adafruit_MQTT_Publish umidadeFeed = Adafruit_MQTT_Publish(&mqtt, AIO_USERNAME "/feeds/umidade-solo");
Adafruit_MQTT_Subscribe bombaFeed = Adafruit_MQTT_Subscribe(&mqtt, AIO_USERNAME "/feeds/estado-bomba");

bool bombaLigada = false;
const int UMIDADE_LIMITE = 30; // em porcentagem (0 a 100)

void MQTT_connect();

void setup() {
  Serial.begin(115200);
  pinMode(waterPump, OUTPUT);
  digitalWrite(waterPump, HIGH); // Bomba desligada no início
  bombaLigada = false;

  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi conectado");

  mqtt.subscribe(&bombaFeed);
}

unsigned long ultimaLeitura = 0;
const unsigned long intervalo = 3000;

void loop() {
  MQTT_connect();

  // Comandos manuais
  Adafruit_MQTT_Subscribe *subscription;
  while ((subscription = mqtt.readSubscription(100))) {
    if (subscription == &bombaFeed) {
      String valor = (char *)bombaFeed.lastread;
      Serial.print("Comando manual recebido: ");
      Serial.println(valor);

      if (valor == "1") {
        digitalWrite(waterPump, LOW);
        bombaLigada = true;
        Serial.println("Bomba LIGADA manualmente");
      } else if (valor == "0") {
        digitalWrite(waterPump, HIGH);
        bombaLigada = false;
        Serial.println("Bomba DESLIGADA manualmente");
      }
    }
  }

  // Verificação da umidade a cada intervalo
  if (millis() - ultimaLeitura > intervalo) {
    ultimaLeitura = millis();

    int leitura = analogRead(sensor); // 0 = úmido, 1023 = seco
    int umidadePercentual = map(leitura, 1023, 0, 0, 100); // quanto menor leitura, maior umidade

    Serial.print("Umidade (%): ");
    Serial.println(umidadePercentual);

    umidadeFeed.publish(umidadePercentual);

    // A lógica agora é baseada no percentual de umidade
    if (umidadePercentual > UMIDADE_LIMITE) {
      if (!bombaLigada) {
        digitalWrite(waterPump, LOW);
        bombaLigada = true;
        Serial.println("Bomba LIGADA automaticamente (solo seco)");
      }
    } else {
      if (bombaLigada) {
        digitalWrite(waterPump, HIGH);
        bombaLigada = false;
        Serial.println("Bomba DESLIGADA automaticamente (solo úmido)");
      }
    }
  }
}

void MQTT_connect() {
  int8_t ret;
  if (mqtt.connected()) return;

  Serial.print("Conectando ao MQTT... ");
  while ((ret = mqtt.connect()) != 0) {
    Serial.println(mqtt.connectErrorString(ret));
    Serial.println("Tentando novamente em 5 segundos...");
    mqtt.disconnect();
    delay(5000);
  }
  Serial.println("Conectado ao MQTT!");
}
