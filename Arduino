#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// WiFi
const char* ssid = "Home_2.4G";
const char* password = "TesteWIFI@2025";

// Adafruit IO MQTT
const char* mqtt_server = "io.adafruit.com";
const int mqtt_port = 1883;
const char* mqtt_user = "mfv555";
const char* mqtt_pass = "aio_VNSb955Yt3a8l5Xtn1tHb7xKuQxn";
const char* feed_umidade = "mfv555/feeds/umidade-solo";
const char* feed_bomba = "mfv555/feeds/estado-bomba";

WiFiClient espClient;
PubSubClient client(espClient);

// Pinos
#define SENSOR_UMIDADE A0
#define RELE D1

int limite_umidade = 400;
String estado_manual = "Desligada";

void setup_wifi() {
  delay(10);
  WiFi.begin(ssid, password);
  Serial.print("Conectando ao WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi conectado.");
}

void callback(char* topic, byte* payload, unsigned int length) {
  payload[length] = '\0'; // garante que a string esteja terminada corretamente
  String msg = String((char*)payload);

  if (strcmp(topic, feed_bomba) == 0) {
    estado_manual = msg;
    if (msg == "Ligada") {
      digitalWrite(RELE, LOW);
    } else {
      digitalWrite(RELE, HIGH);
    }
    Serial.print("Comando manual recebido: ");
    Serial.println(msg);
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Tentando conectar ao MQTT...");
    if (client.connect("ESP8266Client", mqtt_user, mqtt_pass)) {
      Serial.println("Conectado.");
      client.subscribe(feed_bomba);
    } else {
      Serial.print("Falha na conexão. Código: ");
      Serial.print(client.state());
      Serial.println(" Tentando novamente em 5 segundos...");
      delay(5000);
    }
  }
}

void setup() {
  pinMode(RELE, OUTPUT);
  digitalWrite(RELE, HIGH); // bomba desligada
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  int valor_umidade = analogRead(SENSOR_UMIDADE);
  Serial.print("Umidade: ");
  Serial.println(valor_umidade);

  // Publica umidade no Adafruit IO
  char buffer[10];
  snprintf(buffer, sizeof(buffer), "%d", valor_umidade);
  client.publish(feed_umidade, buffer);

  // Modo automático (prioridade solo seco)
  if (valor_umidade > limite_umidade) {
    // solo seco
    digitalWrite(RELE, LOW); // liga bomba
    client.publish(feed_bomba, "Ligada");
  } else if (estado_manual == "Desligada") {
    // solo úmido e comando manual é "Desligada"
    digitalWrite(RELE, HIGH); // desliga bomba
    client.publish(feed_bomba, "Desligada");
  }

  delay(10000); // aguarda 10 segundos
}
