#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// WiFi
const char* ssid = "WIFI_HOME";
const char* password = "H0m3_2025#w1F!";

// Adafruit IO MQTT
const char* mqtt_server = "io.adafruit.com";
const int mqtt_port = 1883;
const char* mqtt_user = "SEU_USUARIO_ADAFRUIT";
const char* mqtt_pass = "SEU_KEY_ADAFRUIT";
const char* feed_umidade = "SEU_USUARIO_ADAFRUIT/feeds/umidade-solo";
const char* feed_bomba = "SEU_USUARIO_ADAFRUIT/feeds/estado-bomba";

WiFiClient espClient;
PubSubClient client(espClient);

// Pinos
#define SENSOR_UMIDADE A0
#define RELE D1

int limite_umidade = 400;

void setup_wifi() {
  delay(10);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

void reconnect() {
  while (!client.connected()) {
    if (client.connect("ESP8266Client", mqtt_user, mqtt_pass)) {
      client.subscribe(feed_bomba); // controle manual se quiser
    } else {
      delay(5000);
    }
  }
}

void setup() {
  pinMode(RELE, OUTPUT);
  digitalWrite(RELE, HIGH); // bomba desligada
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  int valor_umidade = analogRead(SENSOR_UMIDADE);
  Serial.print("Umidade: ");
  Serial.println(valor_umidade);

  if (valor_umidade < limite_umidade) {
    digitalWrite(RELE, LOW); // Liga bomba
    client.publish(feed_bomba, "Ligada");
  } else {
    digitalWrite(RELE, HIGH); // Desliga bomba
    client.publish(feed_bomba, "Desligada");
  }

  // Publica umidade
  char buffer[10];
  snprintf(buffer, sizeof(buffer), "%d", valor_umidade);
  client.publish(feed_umidade, buffer);

  delay(10000); // Aguarda 10 segundos
}
